#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if so, goto Done:

L8:
	iaddq $-8, %rdx		# len-=8
	jl L4:			# if so, goto Loop4:
Loop8:
	mrmovq (%rdi), %r10		# read val from src...
	mrmovq 8(%rdi), %r11	# read val from src...
	mrmovq 16(%rdi), %r12	# read val from src...
	mrmovq 24(%rdi), %r13	# read val from src...
	mrmovq 32(%rdi), %r14	# read val from src...
	mrmovq 40(%rdi), %rcx	# read val from src...
	mrmovq 48(%rdi), %r8	# read val from src...
	mrmovq 56(%rdi), %r9	# read val from src...
	rmmovq %r10, (%rsi)		# ...and store it to dst
  	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	rmmovq %r12, 16(%rsi)	# ...and store it to dst
	rmmovq %r13, 24(%rsi)	# ...and store it to dst
	rmmovq %r14, 32(%rsi)	# ...and store it to dst
	rmmovq %rcx, 40(%rsi)	# ...and store it to dst
	rmmovq %r8, 48(%rsi)	# ...and store it to dst
	rmmovq %r9, 56(%rsi)	# ...and store it to dst
N81:
	andq %r10, %r10			# val <= 0?
	jle N82
	iaddq $1, %rax			# count++
N82:
	andq %r11, %r11			# val <= 0?
	jle N83
	iaddq $1, %rax			# count++
N83:
	andq %r12, %r12			# val <= 0?
	jle N84
	iaddq $1, %rax			# count++
N84:
	andq %r13, %r13			# val <= 0?
	jle N85
	iaddq $1, %rax			# count++
N85:
	andq %r14, %r14			# val <= 0?
	jle N86
	iaddq $1, %rax			# count++
N86:
	andq %rcx, %rcx			# val <= 0?
	jle N87
	iaddq $1, %rax			# count++
N87:
	andq %r8, %r8			# val <= 0?
	jle N88
	iaddq $1, %rax			# count++
N88:
	andq %r9, %r9			# val <= 0?
	jle N89
	iaddq $1, %rax			# count++
N89:
	iaddq $64, %rdi			# src+=8
	iaddq $64, %rsi			# dst+=8
	iaddq $-8, %rdx			# len-=8
	jge Loop8				# if so, goto Loop8:

L4:
	iaddq $4, %rdx
	jl L2
Loop4: 
	mrmovq (%rdi), %r10		# read val from src...
	mrmovq 8(%rdi), %r11	# read val from src...
	mrmovq 16(%rdi), %r12	# read val from src...
	mrmovq 24(%rdi), %r13	# read val from src...
	rmmovq %r10, (%rsi)		# ...and store it to dst
  	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	rmmovq %r12, 16(%rsi)	# ...and store it to dst
  	rmmovq %r13, 24(%rsi)	# ...and store it to dst	
N41:
	andq %r10, %r10			# val <= 0?
	jle N42
	iaddq $1, %rax			# count++
N42:
	andq %r11, %r11			# val <= 0?
	jle N43
	iaddq $1, %rax			# count++
N43:
	andq %r12, %r12			# val <= 0?
	jle N44
	iaddq $1, %rax			# count++
N44:
	andq %r13, %r13			# val <= 0?
	jle N45
	iaddq $1, %rax			# count++
N45:
	iaddq $32, %rdi			# src+=4
	iaddq $32, %rsi			# dst+=4
	iaddq $-4, %rdx			# len-=4
	jge Loop4				# if so, goto Loop4:

L2:	
	iaddq $2, %rdx			# len-=2
	jl L1				# if so, goto L1:
	mrmovq (%rdi), %r10		# read val from src...
	mrmovq 8(%rdi), %r11	# read val from src...
	rmmovq %r10, (%rsi)		# ...and store it to dst
  	rmmovq %r11, 8(%rsi)	# ...and store it to dst

N21:
	andq %r10, %r10			# val <= 0?
	jle N22		
	iaddq $1, %rax			# count++
N22:
	andq %r11, %r11			# val <= 0?
	jle N23
	iaddq $1, %rax			# count++
N23:
	iaddq $16, %rdi			# src+=2
	iaddq $16, %rsi			# dst+=2
	iaddq $-2, %rdx			# len-=2

L1:
	# length = -1 or 0
	# andq %rdx, %rdx		
	iaddq $1, %rdx			# len++
	je N1
	ret
N1:
	mrmovq (%rdi), %r10		# read val from src...
	rmmovq %r10, (%rsi)		# ...and store it to dst
	andq %r10, %r10			# val <= 0?
	jle Done
	iaddq $1, %rax		# count++
	
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
